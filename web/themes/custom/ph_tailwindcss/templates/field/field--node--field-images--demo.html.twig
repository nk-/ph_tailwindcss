{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 */
#}
{%
  set title_classes = [
    label_display == 'visually_hidden' ? 'visually-hidden', 
  ]
%}

{%
  set wrapper_classes = [
    'cursor-pointer',
    'mt-2',
    'mb-12',
    'flex',
    'flex-wrap',
    'items-center',
    'max-w-[48ch]',
  ]
%}
{# Warning!!! A hack to force Tailwind stores this classes that we are setting in Drupal UI. #}
{# The following won't work! #}
{#
{% set css_classes = [] %}  
{% for item in items %}
  {% set css_class = item.content['#media'].get('field_css_class') and item.content['#media'].get('field_css_class').getValue() is not empty ? item.content['#media'].get('field_css_class').getValue().0.value : [] %}
  {% set css_classes = css_classes|merge([css_class])  %}
{% endfor %}
<span{{ create_attribute({'class': css_classes}) }}> </span>
#}
{# So we slight-hardcode :) #}
<span class="hidden h-0 w-0 mb-1 mx-4 mr-12 ml-4 mt-4 my-4 pt-2 max-w-[9rem] max-w-[12.5rem] md:max-w-[17.5rem] max-w-[17.25rem] md:max-w-[23rem] max-w-[2.5rem] md:max-w-[3.5rem]"></span>

{% if label_hidden %}

  {# This is our case! #}
  {% if multiple %}
    <div{{ attributes.addClass(wrapper_classes) }}>
      
      {% for item in items %}
        
        {% set width = item.content['#media'].get('field_width') and item.content['#media'].get('field_width').getValue() is not empty ? item.content['#media'].get('field_width').getValue().0.value %}
        {% set css_class = item.content['#media'].get('field_css_class') and item.content['#media'].get('field_css_class').getValue() is not empty ? item.content['#media'].get('field_css_class').getValue().0.value : [] %}
        
        {# {% set flex_class = loop.index0 == 0 ? 'basis-full' : '' %} #}
        {% if css_class or width > 0 %}        
          {% set maxwidth = 'max-width: ' ~ width ~ 'px' %}
          <div{{ item.attributes.addClass(css_class) }}>{{ item.content }}</div>{# .setAttribute('style', maxwidth) #}
        {% else %}
          {% if item.attributes is not empty %}
            <div{{ item.attributes }}>{{ item.content }}</div>
          {% else %}
            {{ item.content }}
          {% endif %}
        {% endif %}
      {% endfor %}
    </div>

  {# Otherwise fallback to default Drupal's on other case #}
  {% else %}
    {% for item in items %}
      <div{{ attributes.addClass(wrapper_classes) }}>{{ item.content }}</div>
    {% endfor %}
  {% endif %}

{# Otherwise fallback to default Drupal's on other case #}
{% else %}
  <div{{ attributes.addClass(wrapper_classes) }}>
    <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
    {% if multiple %}
      <div>
    {% endif %}
    {% for item in items %}
      {% if item.attributes is not empty %}
        <div{{ item.attributes }}>{{ item.content }}</div>
      {% else %}
        {{ item.content }}
      {% endif %}
    {% endfor %}
    {% if multiple %}
      </div>
    {% endif %}
  </div>
{% endif %}
