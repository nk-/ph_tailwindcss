{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 */
#}
{%
  set title_classes = [
    label_display == 'visually_hidden' ? 'visually-hidden', 
  ]
%}

{%
  set wrapper_classes = [
    'mt-2',
    'mb-8',
    'md:mb-12',
    'flex',
    'items-center',
    'flex-wrap',
    'max-w-[48ch]',
  ]
%}

{# 
  Warning!!! Hardcode to force Tailwind stores this classes
  that we are setting in Drupal UI. on the Media:image entity form within CSS class field.
#}
{% apply spaceless %}
<div class="hidden visually-hidden pt-2 mr-12 ml-4 mt-4 max-w-16 md:max-w-24"><span class="max-w-10 md:max-w-12"><span class="max-w-8 md:max-w-10"><span class="max-w-2 md:max-w-4"></span></span></span></div>
{% endapply %}

{% if label_hidden %}

  {# This is our case! #}
  {% if multiple %}
    <div{{ attributes.addClass(wrapper_classes) }}>
      
      {% for item in items %}
        
        {%
          set css_classes = item.content['#media'].get('field_css_class') and item.content['#media'].get('field_css_class').getValue() is not empty ? item.content['#media'].get('field_css_class').getValue().0.value|split(' ') : [
            'max-w-12',
            'md:max-w-16'
          ]
        %}
        
        {% if css_classes %}        
          <div{{ item.attributes.addClass(css_classes) }}>{{ item.content }}</div>
        {% else %}
          {% if item.attributes is not empty %}
            <div{{ item.attributes }}>{{ item.content }}</div>
          {% else %}
            {{ item.content }}
          {% endif %}
        {% endif %}
      {% endfor %}
    </div>

  {# Otherwise fallback to default Drupal's #}
  {% else %}
    {% for item in items %}
      <div{{ attributes.addClass(wrapper_classes) }}>{{ item.content }}</div>
    {% endfor %}
  {% endif %}

{# Otherwise fallback to default Drupal's #}
{% else %}
  <div{{ attributes.addClass(wrapper_classes) }}>
    <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
    {% if multiple %}
      <div>
    {% endif %}
    {% for item in items %}
      {% if item.attributes is not empty %}
        <div{{ item.attributes }}>{{ item.content }}</div>
      {% else %}
        {{ item.content }}
      {% endif %}
    {% endfor %}
    {% if multiple %}
      </div>
    {% endif %}
  </div>
{% endif %}
