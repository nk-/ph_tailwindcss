<?php

/**
 * @file
 * Functions to support theming in the PH* Tailwind CSS theme.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_item_list_alter(array &$suggestions, array $variables) {
  if (isset($variables['items']) && isset($variables['items']['user.logout'])) {
    $suggestions[] = 'item_list__user_pane';
  }
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__ph_form';
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form_element__' . $variables['element']['#type'];
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#form_id'];
    $suggestions[] = 'form_element__' . $variables['element']['#type'] . '__' . $variables['element']['#form_id'];
  }
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (!in_array($variables['element']['#type'], $suggestions)) {
    $suggestions[] = 'input__' . $variables['element']['#type'];
  }
  $name = strpos($variables['element']['#name'], '[') !== FALSE ? str_replace(['[', ']'], ['_', ''], $variables['element']['#name']) : $variables['element']['#name'];
  $suggestions[] = 'input__' . $variables['element']['#type'] . '__' . $name;
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  if (isset($variables['style_name'])) {
    $suggestions[] = 'image__' . $variables['style_name'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_container__text_format_filter_help(&$variables) {
  unset($variables['children']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_input(&$variables) {
  if (isset($variables['element'])) {
    if (isset($variables['element']['#title'])) {
      $variables['attributes']['placeholder'] = $variables['element']['#title'];
      $variables['title_attributes']['class'][] = 'testover';
    }
    if (isset($variables['element']['#type'])) {

      $variables['close_icon'] = 'close';

      switch ($variables['element']['#type']) {
        case 'textfield':
          $variables['icon'] = 'text_fields';
          break;

        case 'email':
        case 'password':
          $variables['icon'] = $variables['element']['#type'];
          break;

        case 'search':
          $variables['icon'] = $variables['element']['#type'];
          $variables['#attached']['library'][] = 'ph_core/search';
          break;

        case 'url':
          $variables['icon'] = 'add_link';
          break;

        default:
          $variables['icon'] = NULL;
          break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_field(&$variables) {
  $code_fields = [
    'field_code_title' => 'data-collapsible',
    'field_code' => 'data-collapsible-target',
  ];
  if (in_array($variables['field_name'], array_keys($code_fields))) {
    if (isset($variables['element']['#object'])) {
      $variables['collapsible_id'] = 'collapsible-paragraph-' . $variables['element']['#object']->id();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_menu__secondary_menu(&$variables) {
  if ($search_widget = \Drupal::service('ph_core')->renderSearch('search_content', 'page')) {
    $variables['search_widget'] = $search_widget;
  }
  if ($contact_form = \Drupal::service('ph_core')->renderContactForm('feedback')) {
    $variables['contact_form'] = $contact_form;
  }
  $variables['#attached']['library'][] = 'ph_core/collapsible';

  $cid = 'ph_tailwindcss:stagerred';
  $cache = &drupal_static(__FUNCTION__);
  $variables['ph_init'] = TRUE;
  if (!isset($cache)) {
    $variables['ph_init'] = TRUE;
  }
  else {
    $variables['ph_init'] = FALSE;
  }
  /*
  else {
  $variables['ph_cached'] = TRUE;
  }
   */

  /*
  //static &$cache = \Drupal::service('cache.static')->get($cid);
  if ($cached) {
  //$variables['ph_cached'] = $cache->data;
  }
  else {
  $data = TRUE;
  $cache_tags = [
  'session',
  'ph_staggered'
  ];
  \Drupal::service('cache.static')
  ->set($cid, $data, CacheBackendInterface::CACHE_PERMANENT, $cache_tags);
  }
   */
  // dpm(Cache::getBins());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_menu__account(&$variables) {

  $pane_variables = \Drupal::service('ph_core')->renderUserPane($variables['items']);

  if (isset($pane_variables['account']) && isset($pane_variables['image']) && is_object($pane_variables['image']['file'])) {

    $variables['user_link'] = [
      '#theme' => 'image',
      '#style_name' => 'avatar',
      '#uri' => is_object($pane_variables['image']['style']) ? $pane_variables['image']['style']->buildUri($pane_variables['image']['file']->getFileUri()) : $pane_variables['image']['file']->getFileUri(),
      '#attributes' => [
        'data-avatar-color' => '',
      ],
    ] + $pane_variables['image']['attributes'];
  }
  else {
    $variables['user_link'] = 'icon';
  }

  if (isset($pane_variables['items']) && !empty($pane_variables['items'])) {
    $variables['user_pane'] = [
      '#theme' => 'item_list',
      '#items' => $pane_variables['items'],
      '#attributes' => [
        'data-collapsible-hide' => 'user_pane',
      ],
    ];
  }

  if (!empty($pane_variables['forms'])) {
    if (isset($pane_variables['forms']['login_form'])) {
      $variables['login_form'] = $pane_variables['forms']['login_form'];
    }
    if (isset($pane_variables['forms']['register_form'])) {
      $variables['register_form'] = $pane_variables['forms']['register_form'];
    }
  }

  $variables['#attached']['library'][] = 'ph_core/collapsible';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_image(&$variables) {
  if (isset($variables['style_name']) && !empty($variables['style_name'])) {
    $variables['attributes']['class'][] = Html::getClass($variables['style_name']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_file_video(&$variables) {
  if (!empty($variables['files'])) {
    foreach ($variables['files'] as &$file) {
      $file['source_attributes']['data-src'] = $file['source_attributes']['src'];
      unset($file['source_attributes']['src']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_media__video(&$variables) {
  if (isset($variables['elements']['field_media_image'])) {

    $settings = \Drupal::service('entity_type.manager')->getStorage('entity_view_display')
      ->load('media.image.' . $variables['view_mode'])
      ->getRenderer('field_media_image')
      ->getSettings();

    foreach ($variables['elements']['field_media_image'] as $key => $field_media_image) {
      if (is_numeric($key) && isset($field_media_image['#item']) && isset($field_media_image['#item']->entity) && isset($variables['elements']['field_media_video_file']) && isset($variables['elements']['field_media_video_file'][$key])) {
        $image_style = $key == 0 && !isset($variables['elements']['field_media_image'][1]) ? 'poster_large' : $settings['image_style'];
        $style = \Drupal::service('entity_type.manager')->getStorage('image_style')->load($image_style);

        if ($original_image = $field_media_image['#item']->entity->getFileUri()) {
          $variables['elements']['field_media_video_file'][$key]['#attributes']['poster'] = $style->buildUrl($original_image);
        }
      }
    }
  }
}
