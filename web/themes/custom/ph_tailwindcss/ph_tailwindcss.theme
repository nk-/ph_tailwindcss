<?php

/**
 * @file
 * Functions to support theming in the PH* Tailwind CSS theme.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_item_list_alter(array &$suggestions, array $variables) {
  if (isset($variables['items']) && isset($variables['items']['user.logout'])) {
    $suggestions[] = 'item_list__user_pane';
  }
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__ph_form';
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#form_id'])) {

    $suggestions[] = 'container__' . $variables['element']['#form_id'];
    if (isset($variables['element']['#id'])) {
      $id = str_replace(['edit-', '-'], ['', '_'], $variables['element']['#id']);
      $suggestions[] = 'container__' . $id;
      $suggestions[] = 'container__' . $variables['element']['#form_id'] . '__' . $id;
    }
  }
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form_element__' . $variables['element']['#type'];
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#form_id'];
    $suggestions[] = 'form_element__' . $variables['element']['#type'] . '__' . $variables['element']['#form_id'];
  }
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (!in_array($variables['element']['#type'], $suggestions)) {
    $suggestions[] = 'input__' . $variables['element']['#type'];
  }
  if (isset($variables['element']['#name'])) {
    if (strpos($variables['element']['#name'], '[') !== FALSE) {
      $name = str_replace(['[', ']'], ['_', ''], $variables['element']['#name']);
    }
    else {
      $name = $variables['element']['#name'];
    }

    if ($has_digit = strcspn($name, '0123456789')) {
      $name_replace = substr($name, $has_digit, 2);
      $name = str_replace($name_replace, '', $name);
    }

    $suggestions[] = 'input__' . $variables['element']['#type'] . '__' . $name;
  }
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function ph_tailwindcss_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  if (isset($variables['style_name'])) {
    $suggestions[] = 'image__' . $variables['style_name'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_html(&$variables) {
  $variables['html']['#cache']['tags'][] = 'view:frontpage';
  $variables['html']['#cache']['max-age'] = 86400;
  $variables['html']['#cache']['contexts'] = [
    'views',
    'route.name',
  ];

  $meta_data = \Drupal::service('ph_core')->processMetaData($variables);
  if (!empty($meta_data)) {
    $meta = [];
    foreach ($meta_data as $name => $content) {
      $attribute = strpos($name, ':') !== FALSE ? 'property' : 'name';
      $meta[$name] = [
        '#tag' => 'meta',
        '#attributes' => [
          'content' => $content,
        ],
      ];

      $meta[$name]['#attributes'][$attribute] = $name;

    }

    foreach ($meta as $attr => $data) {
      $variables['page']['#attached']['html_head'][] = [$data, $attr];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_image_widget(&$variables) {
  if (!empty($variables['element']['fids']['#value'])) {
    $file = reset($variables['element']['#files']);
    if (isset($variables['data']['file_' . $file->id()]['filename']['#suffix'])) {
      unset($variables['data']['file_' . $file->id()]['filename']['#suffix']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_container__text_format_filter_help(&$variables) {
  unset($variables['children']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_input(&$variables) {
  if (isset($variables['element'])) {
    if (isset($variables['element']['#title'])) {
      $variables['attributes']['placeholder'] = $variables['element']['#title'];
      $variables['title_attributes']['class'][] = 'testover';
    }
    if (isset($variables['element']['#type'])) {

      $variables['close_icon'] = 'close';

      switch ($variables['element']['#type']) {
        case 'textfield':
          $variables['icon'] = 'text_fields';
          break;

        case 'email':
        case 'password':
          $variables['icon'] = $variables['element']['#type'];
          break;

        case 'search':
          $variables['icon'] = $variables['element']['#type'];
          if (isset($variables['element']['#id'])) {
            $widget_id = str_replace(['edit-', '-'], ['', '_'], $variables['element']['#id']);
            $variables['widget_id'] = Html::getUniqueId('ph_' . $widget_id);
          }
          break;

        case 'url':
          $variables['icon'] = 'add_link';
          break;

        default:
          $variables['icon'] = NULL;
          break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_field(&$variables) {
  $code_fields = [
    'field_code_title' => 'data-collapsible',
    'field_code' => 'data-collapsible-target',
    'field_code_body' => 'data-collapsible-target',
  ];
  if (in_array($variables['field_name'], array_keys($code_fields))) {
    if (isset($variables['element']['#object'])) {
      $variables['collapsible_id'] = 'collapsible-paragraph-' . $variables['element']['#object']->id();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_menu__secondary_menu(&$variables) {
  if ($search_widget = \Drupal::service('ph_core')->renderSearch('search_content', 'page')) {
    $variables['search_widget'] = $search_widget;
    $variables['#attached']['library'][] = 'ph_core/search';
  }
  if ($contact_form = \Drupal::service('ph_core')->renderContactForm('feedback')) {
    $variables['contact_form'] = $contact_form;
  }
  $variables['#attached']['library'][] = 'ph_core/collapsible';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_menu__account(&$variables) {

  $pane_variables = \Drupal::service('ph_core')->renderUserPane($variables['items']);

  if (isset($pane_variables['account']) && isset($pane_variables['image']) && is_object($pane_variables['image']['file'])) {

    $variables['user_link'] = [
      '#theme' => 'image',
      '#style_name' => 'avatar',
      '#uri' => is_object($pane_variables['image']['style']) ? $pane_variables['image']['style']->buildUri($pane_variables['image']['file']->getFileUri()) : $pane_variables['image']['file']->getFileUri(),
      '#attributes' => [
        'data-avatar-color' => '',
      ],
    ] + $pane_variables['image']['attributes'];
  }
  else {
    $variables['user_link'] = 'icon';
  }

  if (isset($pane_variables['items']) && !empty($pane_variables['items'])) {
    $variables['user_pane'] = [
      '#theme' => 'item_list',
      '#items' => $pane_variables['items'],
      '#attributes' => [
        'data-collapsible-hide' => 'user_pane',
      ],
    ];
  }

  if (!empty($pane_variables['forms'])) {
    if (isset($pane_variables['forms']['login_form'])) {
      $variables['login_form'] = $pane_variables['forms']['login_form'];
    }
    if (isset($pane_variables['forms']['register_form'])) {
      $variables['register_form'] = $pane_variables['forms']['register_form'];
    }
  }

  $variables['#attached']['library'][] = 'ph_core/collapsible';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_image(&$variables) {
  if (isset($variables['style_name']) && !empty($variables['style_name'])) {
    $variables['attributes']['class'][] = Html::getClass($variables['style_name']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_file_video(&$variables) {
  if (!empty($variables['files'])) {
    foreach ($variables['files'] as &$file) {
      $file['source_attributes']['data-src'] = $file['source_attributes']['src'];
      unset($file['source_attributes']['src']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_file_link(&$variables) {

  $file_usage = \Drupal::service('file.usage')->listUsage($variables['file']);
  if (is_array($file_usage) && isset($file_usage['file']) && isset($file_usage['file']['media'])) {

    $media_id_array = array_keys($file_usage['file']['media']);
    $media_id = reset($media_id_array);

    if ($media = \Drupal::service('entity_type.manager')->getStorage('media')->load($media_id)) {
      $variables['link']['#title'] = $media->getName();
      $mime_type = $variables['file']->getMimeType();
      switch ($mime_type) {
        case 'application/pdf':
          $variables['icon'] = 'picture_as_pdf';
          break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ph_tailwindcss_preprocess_media__video(&$variables) {
  if (isset($variables['elements']['field_media_image'])) {
    if ($media_view_mode = \Drupal::service('entity_type.manager')->getStorage('entity_view_display')->load('media.image.' . $variables['view_mode'])) {
      $settings = $media_view_mode->getRenderer('field_media_image')->getSettings();
      if (is_array($settings) && !empty($settings)) {
        foreach ($variables['elements']['field_media_image'] as $key => $field_media_image) {
          if (is_numeric($key) && isset($field_media_image['#item']) && isset($field_media_image['#item']->entity) && isset($variables['elements']['field_media_video_file']) && isset($variables['elements']['field_media_video_file'][$key])) {
            $image_style = $key == 0 && !isset($variables['elements']['field_media_image'][1]) ? 'poster_large' : $settings['image_style'];
            $style = \Drupal::service('entity_type.manager')->getStorage('image_style')->load($image_style);

            if ($original_image = $field_media_image['#item']->entity->getFileUri()) {
              $variables['elements']['field_media_video_file'][$key]['#attributes']['data-poster'] = $style ? $style->buildUrl($original_image) : $original_image;
            }
          }
        }
      }
    }
  }
}
